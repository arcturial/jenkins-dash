var publicPath  = __dirname + "/public/";

var fs      = require("fs");
var util    = require("util");
var express = require("express");
var request = require("request");
var config  = require("./config.json");
var app     = express();

var port    = config.port ? config.port : 80;
var hosts   = util.isArray(config.hosts) ? config.hosts : [];

// Set up a static file server that will be used
// to serve the compiled/minified files generated by the task runner.
app.use(express.static(publicPath));

// Render the static HTML file. This file is generated from a jade template
// located in "assets".
app.get('/', function(req, res) {
    res.renderFile("index.html");
});

// This route acts as a proxy to circumvent the AJAX origin issues we will have
// if we use front-end AJAX only.
app.get('/data', function (req, res) {

    var count = 0;
    var total = hosts.length;
    var query = "depth=1&tree=jobs[displayName,color,builds[number,timestamp,culprits[property[address],fullName]]{,1}]";
    var content = { jobs: [] };

    // Read the body content and wait until all Jenkins requests have been completed.
    var read = function (err, response, body) {
        body = JSON.parse(body);

        for (var key in body.jobs) {
            var job = body.jobs[key];
            job.host = response.request.uri.hostname;
        }

        content.jobs.push.apply(content.jobs, body.jobs);
        count++;

        // Only send the content once all requests have been read
        if (count == total) {
            res.send(JSON.stringify(content));
        }
    };

    for (var key in hosts) {
        var jenkins = hosts[key];
        var protocol = jenkins.secure ? 'https' : 'http';

        request(protocol + "://" + jenkins.host + ":" + jenkins.port + "/api/json?" + query, read);
    }
});

// Initialize the dashboard
app.listen(port);

// Some output to indicate all is working according to plan.
console.log("* Running on port: " + port);

// Catch any uncaught exceptions so we can run indefinately
process.on('uncaughtException', function(err) {
    console.error('Caught exception: ' + err);
});